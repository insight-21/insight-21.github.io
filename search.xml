<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>blog-deploy-trouble-website</title>
    <url>/archives/3039932550/</url>
    <content><![CDATA[<hr>
<p>title: Hexo博客多线部署 GitHub Gitee Coding<br>categories:</p>
<ul>
<li>blog<br>comment: true<br>abbrlink: 3039932550</li>
</ul>
<hr>
<p>结论：有钱直接上云服务器 没钱的话 不在乎自定义域名就部署国内 否则就GitHub吧</p>
<a id="more"></a>

<p>[toc]</p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>花了一个下午折腾多线部署，以及域名解析<br>到最后一场空 老老实实回GitHub :(</p>
<h2 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h2><ul>
<li>GitHub: 除了慢 什么都好</li>
<li>Gitee &amp; Coding: 速度快 但是如果想要绑定好看的自定义域名 就需要氪金<ul>
<li>Gitee: 需要升级到Gitee Pages Pro</li>
<li>Coding: 大陆节点的自定义域名需要备案 腾讯云和阿里云备案都极其麻烦…</li>
</ul>
</li>
<li>云服务器: 可以考虑 首次配置麻烦点 以及需要续费</li>
</ul>
<h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><p><code>git</code> + <code>hexo</code></p>
<p>hexo博客的本地部署 请参考其他文章<br>本文具体讲本地已经可以运行的博客，如何部署到静态页面</p>
<h2 id="GitHub"><a href="#GitHub" class="headerlink" title="GitHub"></a>GitHub</h2><h2 id="Gitee"><a href="#Gitee" class="headerlink" title="Gitee"></a>Gitee</h2><h2 id="Coding"><a href="#Coding" class="headerlink" title="Coding"></a>Coding</h2>]]></content>
  </entry>
  <entry>
    <title>竞赛模板</title>
    <url>/archives/4279424088/</url>
    <content><![CDATA[<p>竞赛自用模板，放在博客当备份，方便取用。</p>
<a id="more"></a>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Pi acos(-1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PII pair<span class="meta-string">&lt;int, int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> in(x) int (x);cin &gt;&gt; (x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LoopIn(Loop_var) in(Loop_var);while(Loop_var--) </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Loop(i, X, N) for(int i = X; i &lt; N; ++i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IOS ios::sync_with_stdio(false);cin.tie(0);cout.tie(0);</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    IOS</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Codes</category>
      </categories>
  </entry>
  <entry>
    <title>常用代码模板</title>
    <url>/archives/3153460496/</url>
    <content><![CDATA[<p>收集各种基础算法的通用模板，持续更新中。</p>
<a id="more"></a>

<p>模板来自AcWing y总。</p>
<p>[toc]</p>
<h2 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h2><p>最常用的排序，快速排序，属于交换类排序。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">qSort</span><span class="params">(<span class="keyword">int</span> a[], <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l &gt;= r) <span class="keyword">return</span>; <span class="comment">//递归结束条件 划分到只剩下一个数</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> x = a[l + r &gt;&gt; <span class="number">1</span>], i = l - <span class="number">1</span>, j = r + <span class="number">1</span>; <span class="comment">//选定比较数的方法还有很多</span></span><br><span class="line">    <span class="keyword">while</span> (i &lt; j) &#123;</span><br><span class="line">        <span class="keyword">do</span> i++; <span class="keyword">while</span> (a[i] &lt; x);</span><br><span class="line">        <span class="keyword">do</span> j++; <span class="keyword">while</span> (a[j] &gt; x);</span><br><span class="line">        <span class="keyword">if</span> (i &lt; j) swap(a[i], a[j]);</span><br><span class="line">    &#125;</span><br><span class="line">    qSort(a, l, j), qSort(a, j + <span class="number">1</span>, r);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>快排日常已经够用了，但也有不能满足需要的时候，比如求逆序对，这个时候就要用到归并排序。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mergeSort</span><span class="params">(<span class="keyword">int</span> a[], <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l &gt;= r) <span class="keyword">return</span>; <span class="comment">//递归结束条件 划分到只剩下一个数</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    mergeSort(a, l, mid);</span><br><span class="line">    mergeSort(a, mid + <span class="number">1</span>, r);</span><br><span class="line">    <span class="keyword">int</span> t[N];</span><br><span class="line">    <span class="keyword">int</span> index = <span class="number">0</span>, i = l, j = mid + <span class="number">1</span>;</span><br><span class="line">    <span class="comment">//对一分为二的数组 进行比较 然后拷贝到临时数组里面</span></span><br><span class="line">    <span class="keyword">while</span> (i &lt;= mid &amp;&amp; j &lt;= r) &#123;    </span><br><span class="line">        <span class="keyword">if</span> (a[i] &lt; a[j]) t[index++] = a[i++];</span><br><span class="line">        <span class="keyword">else</span> t[index++] = a[j++];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//两个数组可能还有剩余 这时直接把剩下的全拷贝过去</span></span><br><span class="line">    <span class="keyword">while</span> (i &lt;= mid) t[index++] = a[i++];</span><br><span class="line">    <span class="keyword">while</span> (j &lt;= r) t[index++] = a[j++];</span><br><span class="line">    <span class="comment">//最后拷贝已经有序临时数组 </span></span><br><span class="line">    <span class="keyword">for</span> (i = l, j = <span class="number">0</span>; i &lt;= r; i ++, j ++ ) a[i] = t[j];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h2><p>要求已有数据为有序状态。<br>$$</p>
<p>$$<br><strong>整数二分和浮点数二分的区别是</strong></p>
<ol>
<li><p><strong>循环结束条件的写法</strong></p>
</li>
<li><p><strong>浮点数不能使用位运算</strong></p>
</li>
</ol>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//整数</span></span><br><span class="line"><span class="keyword">while</span> (l &lt; r) &#123;</span><br><span class="line">     mid = (r - l) &gt;&gt; <span class="number">1</span> + l;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//浮点数 </span></span><br><span class="line"><span class="comment">//因为浮点数会有精度损失问题 所以使用这样的比较写法</span></span><br><span class="line"><span class="comment">//1e-n 保留 n 位小数 保险起见可以多加一位</span></span><br><span class="line"><span class="keyword">while</span> (r - l &lt; <span class="number">1</span>e-n) &#123;</span><br><span class="line">    mid = (r - l) / <span class="number">2.0</span> + l;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>划分的区间为 [l, mid]，[mid + 1, r] 时，一般用途求最小化。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//划分的区间为[l, mid]，[mid + 1, r]</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">binarySearch_1</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (l &lt; r) &#123;</span><br><span class="line">        <span class="keyword">int</span> mid = (r - l) &gt;&gt; <span class="number">1</span> + l; <span class="comment">//防止溢出 好习惯 从我做起</span></span><br><span class="line">        <span class="keyword">if</span> (check(mid)) r = mid;</span><br><span class="line">        <span class="keyword">else</span> l = mid + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> l;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>划分的区间为 [l, mid - 1]，[mid, r] 时，一般用途求最大化。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//划分的区间为[l, mid - 1]，[mid, r]</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">binarySearch_1</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (l &lt; r) &#123;</span><br><span class="line">        <span class="keyword">int</span> mid = (r - l + <span class="number">1</span>) &gt;&gt; <span class="number">1</span> + l; <span class="comment">//需要额外加1 防止死循环</span></span><br><span class="line">        <span class="keyword">if</span> (check(mid)) l = mid;</span><br><span class="line">        <span class="keyword">else</span> r = mid - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> l;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果你对区间的划分和对应的二分记不清楚的话，我这里提供一个我自己的小技巧</p>
<ol>
<li>求最大化，右边比左边大，那 mid 就在右区间，而 mid 的左边 mid - 1 就是左区间，即[l, mid - 1]，[mid, r]；</li>
<li>求最小化，左边比右边小，那 mid 就在左区间，而 mid 的右边 mid + 1 就是右区间，即[l, mid]，[mid + 1, r]。</li>
<li>另外，如果只是单纯查找一个数，两个模板都可以用，或者使用最朴素的二分查找。</li>
</ol>
<h2 id="大数加减乘除"><a href="#大数加减乘除" class="headerlink" title="大数加减乘除"></a>大数加减乘除</h2><p>当运算数连 long long 都保存不了，就使用字符串或者整型数组来处理这类问题。</p>
<p>加法</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//123 在vector中为321 逆序存放</span></span><br><span class="line"><span class="comment">//&amp; 运算符可以加快传参速度</span></span><br><span class="line"><span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">add</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;A, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;B)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//采用大数 + 小数的方式</span></span><br><span class="line">    <span class="keyword">if</span> (A.<span class="built_in">size</span>() &lt; B.<span class="built_in">size</span>()) <span class="keyword">return</span> add(B, A);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ret;</span><br><span class="line">    <span class="keyword">int</span> carry = <span class="number">0</span>; <span class="comment">//保存加法进位</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; A.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">        <span class="comment">//不断进行末位相加 结果是余数 进位不断前进</span></span><br><span class="line">        carry += A[i];</span><br><span class="line">        <span class="keyword">if</span> (i &lt; B.<span class="built_in">size</span>()) carry += B[i];</span><br><span class="line">        ret.push_back(carry % <span class="number">10</span>);</span><br><span class="line">        carry /= <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">	<span class="comment">//如果最后还有进位 就加进去</span></span><br><span class="line">    <span class="keyword">if</span> (carry) ret.push_back(carry);</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>减法</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//与加法同理</span></span><br><span class="line"><span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">sub</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;A, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;B)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ret;</span><br><span class="line">    <span class="keyword">int</span> carry = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, t = <span class="number">0</span>; i &lt; A.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">        carry = A[i] - carry;<span class="comment">//如果有借位 就减掉</span></span><br><span class="line">        <span class="keyword">if</span> (i &lt; B.<span class="built_in">size</span>()) carry -= B[i];</span><br><span class="line">        ret.push_back((carry + <span class="number">10</span>) % <span class="number">10</span>);</span><br><span class="line">        <span class="comment">//每次借位只有0 或 1两种情况</span></span><br><span class="line">        <span class="keyword">if</span> (carry &lt; <span class="number">0</span>) t = <span class="number">1</span>; </span><br><span class="line">        <span class="keyword">else</span> carry = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">	<span class="comment">//消除前导0</span></span><br><span class="line">    <span class="keyword">while</span> (ret.<span class="built_in">size</span>() &gt; <span class="number">1</span> &amp;&amp; ret.back() == <span class="number">0</span>) ret.pop_back();</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>乘法</p>
<ul>
<li><input disabled="" type="checkbox"> 大数和大数乘法</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//首先是大数与一位数的乘法 再扩展到大数与大数的乘法</span></span><br><span class="line"><span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">mulSingle</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;A, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ret;</span><br><span class="line">    <span class="keyword">int</span> t = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; A.<span class="built_in">size</span>() || t; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i &lt; A.<span class="built_in">size</span>()) t += A[i] * b;</span><br><span class="line">        ret.push_back(t % <span class="number">10</span>);</span><br><span class="line">        t /= <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//消除前导0 比如123 可能逆序存放为3210</span></span><br><span class="line">    <span class="keyword">while</span> (ret.<span class="built_in">size</span>() &gt; <span class="number">1</span> &amp;&amp; ret.back() == <span class="number">0</span>) ret.pop_back();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>除法</p>
<ul>
<li><input disabled="" type="checkbox"> 大数与大数除法</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//A 被除数 b 除数 r 余数</span></span><br><span class="line"><span class="comment">//一般情况除数不会爆数据类型 使用普通除法就行</span></span><br><span class="line"><span class="comment">//极限情况的大数与大数除法 需要别的思路 还没有写好...</span></span><br><span class="line"><span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">div_1</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;A, <span class="keyword">int</span> b, <span class="keyword">int</span> &amp;r)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ret;</span><br><span class="line">    r = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = A.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i -- ) &#123;</span><br><span class="line">        r = r * <span class="number">10</span> + A[i];</span><br><span class="line">        ret.push_back(r / b);</span><br><span class="line">        r %= b;</span><br><span class="line">    &#125;</span><br><span class="line">    reverse(ret.<span class="built_in">begin</span>(), ret.<span class="built_in">end</span>());</span><br><span class="line">    <span class="keyword">while</span> (ret.<span class="built_in">size</span>() &gt; <span class="number">1</span> &amp;&amp; ret.back() == <span class="number">0</span>) ret.pop_back();</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="因数个数与因数之和"><a href="#因数个数与因数之和" class="headerlink" title="因数个数与因数之和"></a>因数个数与因数之和</h2><h3 id="因数个数"><a href="#因数个数" class="headerlink" title="因数个数"></a>因数个数</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//因数个数</span></span><br><span class="line"><span class="comment">//原理: 每个质因子的最高次方+1的连乘</span></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">cal</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> ans = <span class="number">1</span>, res = <span class="number">0</span>, temp = <span class="number">0</span>;</span><br><span class="line">    Loop(i, <span class="number">2</span>, x) &#123;</span><br><span class="line">        res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (x % i == <span class="number">0</span>) &#123;</span><br><span class="line">            ++res;</span><br><span class="line">            x /= i;</span><br><span class="line">        &#125;</span><br><span class="line">        ans *= (res + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="因数之和"><a href="#因数之和" class="headerlink" title="因数之和"></a>因数之和</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//因数之和</span></span><br><span class="line"><span class="comment">//原理: 每个质因子从0次方加到它的最高次方，然后连乘。</span></span><br><span class="line"><span class="comment">//比如：求18 ，（2^0 + 2)*(3^0+3+3^2) = 3*13 = 39 </span></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">cal</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> ans = <span class="number">1</span>, res = <span class="number">0</span>, temp = <span class="number">0</span>;</span><br><span class="line">    Loop(i, <span class="number">2</span>, x) &#123;</span><br><span class="line">        res = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (x % i == <span class="number">0</span>) &#123;</span><br><span class="line">            res *= i;</span><br><span class="line">            x /= i;</span><br><span class="line">        &#125;</span><br><span class="line">        temp = (res * i - <span class="number">1</span>) / (i - <span class="number">1</span>);</span><br><span class="line">        ans *= temp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="究极位运算用法收集"><a href="#究极位运算用法收集" class="headerlink" title="究极位运算用法收集"></a>究极位运算用法收集</h2>]]></content>
      <categories>
        <category>Codes</category>
      </categories>
  </entry>
  <entry>
    <title>书单</title>
    <url>/archives/3902883597/</url>
    <content><![CDATA[<p>心血来潮想要记录一下个人书单，同时也是一个个人学习路线，挂在博客当达摩克利斯之剑。</p>
 <a id="more"></a> 

<blockquote>
<p>黑色标粗，是想要着重看的；</p>
<p>标号，代表想要阅读的次序。</p>
</blockquote>
<h3 id="计算机基础书籍-面试基础"><a href="#计算机基础书籍-面试基础" class="headerlink" title="计算机基础书籍  |  面试基础"></a>计算机基础书籍  |  面试基础</h3><ol>
<li>数据结构和算法分析 [美] Mark Allen Weiss</li>
<li>操作系统 </li>
<li>计算机组成原理</li>
<li><strong>计算机网络：自顶向下</strong></li>
<li><strong>TCP / IP详解</strong></li>
</ol>
<h3 id="算法和竞赛书籍"><a href="#算法和竞赛书籍" class="headerlink" title="算法和竞赛书籍"></a>算法和竞赛书籍</h3><ol>
<li><strong>算法竞赛入门经典</strong> [中]刘汝佳 （紫 蓝 绿三本书）</li>
<li>算法设计与分析/算法设计手册</li>
<li>挑战程序设计竞赛 [日] 秋叶拓哉  岩田阳一  北川宜稔 <del>（大概率不读）</del></li>
</ol>
<h3 id="Java-基础书籍"><a href="#Java-基础书籍" class="headerlink" title="Java 基础书籍"></a>Java 基础书籍</h3><ol>
<li><strong>Java核心实用技术卷一 、二</strong></li>
<li><strong>Java编程思想 thinking in java</strong></li>
<li><strong>深入理解Java虚拟机</strong></li>
</ol>
<h3 id="JavaEE-开发框架"><a href="#JavaEE-开发框架" class="headerlink" title="JavaEE  |  开发框架"></a>JavaEE  |  开发框架</h3><ol>
<li><strong>Spring Boot 实战</strong> （强烈推荐，目前主流框架）</li>
<li>Spring实战 （学完Spring Boot 回来看Spring）</li>
<li>Spring揭秘</li>
</ol>
<h3 id="Java-提升修炼"><a href="#Java-提升修炼" class="headerlink" title="Java 提升修炼"></a>Java 提升修炼</h3><ol>
<li>Java并发实战</li>
<li>Java并发编程的艺术</li>
<li>OnJava8</li>
<li>Effective Java</li>
<li>重构 改善既有代码设计</li>
<li>函数编程思维</li>
<li>JDK源码阅读</li>
<li>阿里巴巴Java开发手册</li>
</ol>
<h3 id="零食"><a href="#零食" class="headerlink" title="零食"></a>零食</h3><ol>
<li>浪潮之巅</li>
<li>代码整洁之道</li>
<li>程序员的职业素养</li>
</ol>
<p>最后留一句，大学毕业前能看到Spring Boot 算我🐂🍺。</p>
]]></content>
      <categories>
        <category>Books</category>
      </categories>
  </entry>
  <entry>
    <title>My First archive</title>
    <url>/archives/2043672006/</url>
    <content><![CDATA[<p>文章测试</p>
<p>$$<br>\pi = \frac a b<br>$$</p>
<a id="more"></a>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">"hello"</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Tools</category>
      </categories>
  </entry>
</search>
